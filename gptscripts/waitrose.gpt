tools: schema.read, recipe.query, recipe.data, output.format, sys.read, sys.exec, sys.write, sys.append
descriptions: Understand database schemas form sql queries
args: user_id: The user_id we want to know about.
args: recipe_theme: The theme of the recipes.
args: number: The number of recipes to output.

Do the following steps sequentially only write and read files as instructed:
  1. Read and understand: {schema.read}.
  2. Read and understand: {memory.read} then run {recipe.query}.
  3. Read and analyse: {recipe.data}, then output a JSON list of {number}, {recipe_theme} recipes using formatting {output.format}.

---
name: schema.read
description: Read the schema of the recipes.sqlite database. Write the result to memory.txt.

#!bash 
echo -e "DATABASE SCHEMA\n" > memory.txt && sqlite3 recipes.sqlite ".schema" >> memory.txt

---  
name: memory.read
tools: sys.read
description: Read the memory file.

--filename 'memory.txt'

---
name: recipe.query
tools: sys.exec
description: Query for the top 10 most bought products by user_id, get their recipe ids, and extract recipe data.
--command
sqlite3 recipes.sqlite <<EOF
.headers on
.mode csv
.output recipes.csv
SELECT
REPLACE(REPLACE(r.name, ',', ''), '\n', ' ') AS name,
r.imageurl,
r.kcals,
r.saturatedfat,
r.sugars,
r.protein,
r.salt,
r.fibre

FROM Recipes r
WHERE r.id IN (
SELECT CAST(recipeids AS INTEGER)
FROM Products p
WHERE p.id IN (
SELECT id
FROM Purchases
WHERE user_id = '${user_id}'
ORDER BY quantity DESC
LIMIT 10
)
);
EOF

---
name: recipe.data
tools: sys.read
description: Read recipes.csv to then output a JSON list..

--filename 'recipes.csv'

---  
name: output.format
description: Format the output to the query results in a strict JSON format. Format the output to display recipe details including name, summary, and image URL.
\`\`\`json
[{
  "recipe.name": "name",
  "recipe.summary": "summary", 
  "recipe.imageurl": "imageurl"
}]  
\`\`\`

---
JSON Response: true
Model: gpt-4-turbo